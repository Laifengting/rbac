<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns = "http://www.springframework.org/schema/beans"
       xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context = "http://www.springframework.org/schema/context"
       xmlns:tx = "http://www.springframework.org/schema/tx"
       xmlns:aop = "http://www.springframework.org/schema/aop"
       xsi:schemaLocation = "http://www.springframework.org/schema/beans
	   http://www.springframework.org/schema/beans/spring-beans.xsd
	   http://www.springframework.org/schema/context
	   http://www.springframework.org/schema/context/spring-context.xsd
	   http://www.springframework.org/schema/tx
	   http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- Spring 用来控制业务逻辑。数据源、事务控制、AOP -->
    <!-- 引入外部配置文件 -->
    <context:property-placeholder location = "classpath*:jdbc/jdbc.properties"/>

    <bean id = "dataSource"
          class = "com.alibaba.druid.pool.DruidDataSource">
        <property name = "url"
                  value = "${jdbc.url}"/>
        <property name = "driverClassName"
                  value = "${jdbc.driver}"/>
        <property name = "username"
                  value = "${jdbc.username}"/>
        <property name = "password"
                  value = "${jdbc.password}"/>
    </bean>

    <!--
    整合MyBatis
        目的：	1. 使用 Spring 管理所有组件。Mapper 的实现类。
                service ==> Dao  使用 @Autowired 自动注入 mapper;
                2. 使用 Spring 来管理事务，Spring 声明式事务
    -->
    <!-- 会创建出 SqlSessionFactory 对象 -->
    <bean id = "sqlSessionFactoryBean"
          class = "org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 指定 MyBatis 的 SqlSession 连接的数据源 -->
        <property name = "dataSource"
                  ref = "dataSource"/>
        <!-- 指定 MyBatis 给整个包下的实体类取别名 -->
        <property name = "typeAliasesPackage"
                  value = "com.lft.mybatis.spring.entity"/>
        <!-- 指定 MyBatis 全局配置文件的位置 -->
        <property name = "configLocation"
                  value = "classpath:mybatis/mybatis.xml"/>
        <!-- 用于指定 MyBatis XxxMapper.xml 文件位置 -->
        <property name = "mapperLocations"
                  value = "classpath*:mybatis/mapper/*Mapper.xml"/>
    </bean>

    <!-- 指定扫描所有的 Mapper 接口的包的位置 -->
    <!--<mybatis:scan base-package = "com.lft.mybatis.spring.dao"></mybatis:scan>-->
    <!-- 等同于以下配置 -->
    <bean class = "org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name = "basePackage"
                  value = "com.lft.rbac.mapper"/>
    </bean>

    <!-- Spring 事务管理器 -->
    <bean id = "txManager"
          class = "org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 指定控制哪个数据源的事务开启关闭提交回滚 -->
        <property name = "dataSource"
                  ref = "dataSource"/>
    </bean>

    <!-- 开启基于注解的事务 -->
    <tx:annotation-driven transaction-manager = "txManager"/>

    <!-- 事务通知 -->
    <tx:advice id = "txAdvice"
               transaction-manager = "txManager">
        <tx:attributes>
            <tx:method name = "*"
                       propagation = "REQUIRED"
                       isolation = "REPEATABLE_READ"
                       rollback-for = "java.lang.Exception"/>
            <tx:method name = "query*"
                       read-only = "true"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:advisor advice-ref = "txAdvice"
                     pointcut = "execution(* com.lft..*Service.*(..))"/>
    </aop:config>

</beans>
